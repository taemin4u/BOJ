처음에는 모든 1을 파괴하여 최소값을 구하려했음 -> (N * M)^2의 시간복잡도 = 1조개의 경우의 수 (N, M 최대 1000)
보통 시간제한 1초가 1억개의 경우의 수이므로 시간초과 발생

그래서 BFS를 해가며 지금까지 이 좌표를 오는데 벽을 뚫은 경험이 있는지를 나타내는 변수를 추가하여 
(0, 0)부터 시작 -> visited[i][j]가 false일 때 아예 0이어서 방문 가능한 경우, 1이지만 벽을 아직까지 뚫은 경험이 없어 방문 가능한 경우, 
1이고 이미 벽을 뚫은 경우로 구분함
->
0 0 0
1 1 0
0 0 0
0 1 1
1 1 1
0 0 0 
반례가 존재, (4, 0)의 1을 (1, 0)에서 시작한 1이 먼저 탐색을 하고 visited를 true로 만들어서 벽을 아직 안뚫은 경우가 애초에 도달하지 못함

그래서 visited에 조건을 더 추가하여 3차원 배열로 만듬 -> (y, x, 여기까지 오는데 벽이 뚫린 경험 유무)
이렇게하면 (4, 0)의 1이 두 번 검사가 되어 한 번도 벽을 안뚫은 경우도 이 1을 탐색할 수 있음

1. 시간 복잡도를 풀기 전에 한 번 생각해보기
2. 한 구조체를 만들어 큐에 넣어 BFS도 가능
3. 어떤 경우가 중복이 되면 나누기) 벽이 한 번 뚫려진 채로 false, 벽이 한 번도 안뚫린 채로 false